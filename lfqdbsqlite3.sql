-- MySQL Script generated by MySQL Workbench
-- Fri Aug  7 13:16:15 2015
-- Model: LFQDB    Version: 1.0
-- MySQL Workbench Forward Engineering


-- -----------------------------------------------------
-- Schema LFQDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema LFQDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table Protein
-- -----------------------------------------------------
DROP TABLE IF EXISTS Protein ;

CREATE TABLE IF NOT EXISTS Protein (
idProtein INT NOT NULL ,
proteinID VARCHAR(45) NOT NULL ,
houseKeeping TINYINT(1) NULL ,
name VARCHAR(45) NULL ,
PRIMARY KEY (idProtein)  
)
;


-- -----------------------------------------------------
-- Table Experiment
-- -----------------------------------------------------
DROP TABLE IF EXISTS Experiment ;

CREATE TABLE IF NOT EXISTS Experiment (
idExperiment INT NOT NULL ,
name VARCHAR(45) NOT NULL ,
desicription VARCHAR(45) NULL ,
PRIMARY KEY (idExperiment)  
)
;
CREATE UNIQUE INDEX name_UNIQUE  ON Experiment (name ASC)  ;


-- -----------------------------------------------------
-- Table Run
-- -----------------------------------------------------
DROP TABLE IF EXISTS Run ;

CREATE TABLE IF NOT EXISTS Run (
idRun INT NOT NULL ,
fileName VARCHAR(45) NOT NULL ,
condition VARCHAR(45) NULL ,
bioReplicate VARCHAR(45) NULL ,
Experiment_idExperiment INT NOT NULL ,
PRIMARY KEY (Experiment_idExperiment, idRun)  ,
CONSTRAINT fk_Run_Experiment1
FOREIGN KEY (Experiment_idExperiment
)
REFERENCES Experiment (idExperiment
)
ON DELETE CASCADE
ON UPDATE CASCADE
)
;
CREATE INDEX fk_Run_Experiment1_idx  ON Run (Experiment_idExperiment ASC)  ;;
CREATE UNIQUE INDEX fileName_UNIQUE  ON Run (fileName ASC)  ;


-- -----------------------------------------------------
-- Table QuantProtein
-- -----------------------------------------------------
DROP TABLE IF EXISTS QuantProtein ;

CREATE TABLE IF NOT EXISTS QuantProtein (
idQuantProtein INT NOT NULL ,
area DOUBLE NULL ,
intensity DOUBLE NULL ,
signalToNoise DOUBLE NULL ,
Protein_idProtein INT NOT NULL ,
Run_Experiment_idExperiment INT NOT NULL ,
Run_idRun INT NOT NULL ,
PRIMARY KEY (idQuantProtein, Protein_idProtein, Run_Experiment_idExperiment, Run_idRun)  ,
CONSTRAINT fk_QuantProtein_Protein1
FOREIGN KEY (Protein_idProtein
)
REFERENCES Protein (idProtein
)
ON DELETE CASCADE
ON UPDATE CASCADE,
CONSTRAINT fk_QuantProtein_Run1
FOREIGN KEY (Run_Experiment_idExperiment , Run_idRun
)
REFERENCES Run (Experiment_idExperiment , idRun
)
ON DELETE CASCADE
ON UPDATE CASCADE
)
;
CREATE INDEX fk_QuantProtein_Protein1_idx  ON QuantProtein (Protein_idProtein ASC)  ;;
CREATE INDEX fk_QuantProtein_Run1_idx  ON QuantProtein (Run_Experiment_idExperiment ASC, Run_idRun ASC)  ;


-- -----------------------------------------------------
-- Table Peptide
-- -----------------------------------------------------
DROP TABLE IF EXISTS Peptide ;

CREATE TABLE IF NOT EXISTS Peptide (
idPeptide INT NOT NULL ,
name VARCHAR(45) NULL ,
mz DOUBLE NULL ,
iRT DOUBLE NULL ,
strippedSequence VARCHAR(45) NULL ,
modifiedSequence VARCHAR(45) NULL ,
score VARCHAR(45) NULL ,
scoreType VARCHAR(45) NULL ,
PRIMARY KEY (idPeptide)  
)
;


-- -----------------------------------------------------
-- Table QuantPeptide
-- -----------------------------------------------------
DROP TABLE IF EXISTS QuantPeptide ;

CREATE TABLE IF NOT EXISTS QuantPeptide (
idQuantPeptide INT NOT NULL ,
mz DOUBLE NULL ,
rt DOUBLE NULL ,
area DOUBLE NULL ,
intensity DOUBLE NULL ,
QuantProtein_idQuantProtein INT NULL ,
Peptide_idPeptide INT NOT NULL ,
PRIMARY KEY (idQuantPeptide, Peptide_idPeptide)  
)
;
CREATE INDEX fk_QuantPeptide_QuantProtein1_idx  ON QuantPeptide (QuantProtein_idQuantProtein ASC)  ;;
CREATE INDEX fk_QuantPeptide_Peptide1_idx  ON QuantPeptide (Peptide_idPeptide ASC)  ;


-- -----------------------------------------------------
-- Table Precursor
-- -----------------------------------------------------
DROP TABLE IF EXISTS Precursor ;

CREATE TABLE IF NOT EXISTS Precursor (
idPrecursor INT NOT NULL ,
name VARCHAR(45) NULL ,
mz DOUBLE NULL ,
charge INT NULL ,
Peptide_idPeptide INT NOT NULL ,
PRIMARY KEY (idPrecursor)  
)
;
CREATE INDEX fk_Precursor_Peptide1_idx  ON Precursor (Peptide_idPeptide ASC)  ;


-- -----------------------------------------------------
-- Table QuantPrecursorDIA
-- -----------------------------------------------------
DROP TABLE IF EXISTS QuantPrecursorDIA ;

CREATE TABLE IF NOT EXISTS QuantPrecursorDIA (
idQuantPrecursorDIA INT NOT NULL ,
rt DOUBLE NULL ,
area DOUBLE NULL ,
intensity DOUBLE NULL ,
cScore DOUBLE NULL ,
qValue DOUBLE NULL ,
signalToNoise VARCHAR(45) NULL ,
QuantPeptide_idQuantPeptide INT NOT NULL ,
Precursor_idPrecursor INT NOT NULL ,
PRIMARY KEY (idQuantPrecursorDIA, QuantPeptide_idQuantPeptide, Precursor_idPrecursor)  ,
CONSTRAINT fk_QuantPrecursorMS2_QuantPeptide1
FOREIGN KEY (QuantPeptide_idQuantPeptide
)
REFERENCES QuantPeptide (idQuantPeptide
)
ON DELETE CASCADE
ON UPDATE CASCADE,
CONSTRAINT fk_QuantPrecursorDIA_Precursor1
FOREIGN KEY (Precursor_idPrecursor
)
REFERENCES Precursor (idPrecursor
)
ON DELETE CASCADE
ON UPDATE CASCADE
)
;
CREATE INDEX fk_QuantPrecursorMS2_QuantPeptide1_idx  ON QuantPrecursorDIA (QuantPeptide_idQuantPeptide ASC)  ;;
CREATE INDEX fk_QuantPrecursorDIA_Precursor1_idx  ON QuantPrecursorDIA (Precursor_idPrecursor ASC)  ;


-- -----------------------------------------------------
-- Table Fragment
-- -----------------------------------------------------
DROP TABLE IF EXISTS Fragment ;

CREATE TABLE IF NOT EXISTS Fragment (
idSpectraLibraryFragment INT NOT NULL ,
mz DOUBLE NULL ,
mzPredicted VARCHAR(45) NULL ,
charge INT NULL ,
relativeIntensity DOUBLE NULL ,
fragmentType VARCHAR(45) NULL ,
fragmentNumber INT NULL ,
losstype VARCHAR(45) NULL ,
excludeFromQuantification TINYINT(1) NULL ,
Precursor_idPrecursor INT NOT NULL ,
PRIMARY KEY (idSpectraLibraryFragment, Precursor_idPrecursor)  ,
CONSTRAINT fk_SpectraLibraryFragment_Precursor1
FOREIGN KEY (Precursor_idPrecursor
)
REFERENCES Precursor (idPrecursor
)
ON DELETE NO ACTION
ON UPDATE NO ACTION
)
;
CREATE INDEX fk_SpectraLibraryFragment_Precursor1_idx  ON Fragment (Precursor_idPrecursor ASC)  ;


-- -----------------------------------------------------
-- Table QuantFragments
-- -----------------------------------------------------
DROP TABLE IF EXISTS QuantFragments ;

CREATE TABLE IF NOT EXISTS QuantFragments (
idQuantFragment VARCHAR(45) NOT NULL ,
mz DOUBLE NULL ,
rt DOUBLE NULL ,
area DOUBLE NULL ,
intensity DOUBLE NULL ,
interference DOUBLE NULL ,
signalToNoise DOUBLE NULL ,
QuantPrecursorDIA_idQuantPrecursorDIA INT NOT NULL ,
Fragment_idSpectraLibraryFragment INT NOT NULL ,
Fragment_Precursor_idPrecursor INT NOT NULL ,
PRIMARY KEY (idQuantFragment, QuantPrecursorDIA_idQuantPrecursorDIA, Fragment_idSpectraLibraryFragment, Fragment_Precursor_idPrecursor)  ,
CONSTRAINT fk_QuantFragments_QuantPrecursorDIA1
FOREIGN KEY (QuantPrecursorDIA_idQuantPrecursorDIA
)
REFERENCES QuantPrecursorDIA (idQuantPrecursorDIA
)
ON DELETE CASCADE
ON UPDATE CASCADE,
CONSTRAINT fk_QuantFragments_Fragment1
FOREIGN KEY (Fragment_idSpectraLibraryFragment , Fragment_Precursor_idPrecursor
)
REFERENCES Fragment (idSpectraLibraryFragment , Precursor_idPrecursor
)
ON DELETE CASCADE
ON UPDATE CASCADE
)
;
CREATE INDEX fk_QuantFragments_QuantPrecursorDIA1_idx  ON QuantFragments (QuantPrecursorDIA_idQuantPrecursorDIA ASC)  ;;
CREATE INDEX fk_QuantFragments_Fragment1_idx  ON QuantFragments (Fragment_idSpectraLibraryFragment ASC, Fragment_Precursor_idPrecursor ASC)  ;


-- -----------------------------------------------------
-- Table QuantPrecursorLFQ
-- -----------------------------------------------------
DROP TABLE IF EXISTS QuantPrecursorLFQ ;

CREATE TABLE IF NOT EXISTS QuantPrecursorLFQ (
idQuantPrecursorMS1 INT NOT NULL ,
rt DOUBLE NULL ,
mz DOUBLE NULL ,
area DOUBLE NULL ,
intensity DOUBLE NULL ,
signalToNoise DOUBLE NULL ,
QuantPeptide_idQuantPeptide INT NOT NULL ,
Precursor_idPrecursor INT NOT NULL ,
PRIMARY KEY (idQuantPrecursorMS1, QuantPeptide_idQuantPeptide, Precursor_idPrecursor)  ,
CONSTRAINT fk_QuantPrecursorMS1_QuantPeptide1
FOREIGN KEY (QuantPeptide_idQuantPeptide
)
REFERENCES QuantPeptide (idQuantPeptide
)
ON DELETE CASCADE
ON UPDATE CASCADE,
CONSTRAINT fk_QuantPrecursorLFQ_Precursor1
FOREIGN KEY (Precursor_idPrecursor
)
REFERENCES Precursor (idPrecursor
)
ON DELETE CASCADE
ON UPDATE CASCADE
)
;
CREATE INDEX fk_QuantPrecursorMS1_QuantPeptide1_idx  ON QuantPrecursorLFQ (QuantPeptide_idQuantPeptide ASC)  ;;
CREATE INDEX fk_QuantPrecursorLFQ_Precursor1_idx  ON QuantPrecursorLFQ (Precursor_idPrecursor ASC)  ;


-- -----------------------------------------------------
-- Table ProteinPeptide
-- -----------------------------------------------------
DROP TABLE IF EXISTS ProteinPeptide ;

CREATE TABLE IF NOT EXISTS ProteinPeptide (
Peptide_idPeptide INT NOT NULL ,
ProteinInformation_idProtein INT NOT NULL ,
PRIMARY KEY (Peptide_idPeptide, ProteinInformation_idProtein)  ,
CONSTRAINT fk_Peptide_has_ProteinInformation1_Peptide1
FOREIGN KEY (Peptide_idPeptide
)
REFERENCES Peptide (idPeptide
)
ON DELETE CASCADE
ON UPDATE CASCADE,
CONSTRAINT fk_Peptide_has_ProteinInformation1_ProteinInformation1
FOREIGN KEY (ProteinInformation_idProtein
)
REFERENCES Protein (idProtein
)
ON DELETE CASCADE
ON UPDATE CASCADE
)
;
CREATE INDEX fk_Peptide_has_ProteinInformation1_ProteinInformation1_idx  ON ProteinPeptide (ProteinInformation_idProtein ASC)  ;;
CREATE INDEX fk_Peptide_has_ProteinInformation1_Peptide1_idx  ON ProteinPeptide (Peptide_idPeptide ASC)  ;


